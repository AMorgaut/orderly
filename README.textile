h1. Orderly JSON

Orderly is an ergonomic micro-language that can represent a subset of "JSONSchema":http://json-schema.org.  Orderly is designed to _feel_ familiar to the average programmer and to be extremely easy to learn and remember.

h2. WARNING

This proposal is HIGHLY subject to change and evolve in drastic ways.  This is not yet real, do not believe it in.

h2. A Subset of JSONSchema

JSONSchema is good in many ways, but not perfect.  JSONSchema attempts to provide a representation for three distinct types of information about JSON structures:
* Data structure (for documentation and validation purposes)
* Storage attributes (to provide hints for tools that wish to persist JSON data) 
* Metadata for Interaction Control (to provide hints on how to render a UI where data can be manipulated).

Orderly ignores all features of JSONSchema which aren't useful for validation, including the following attributes:
 
* options (label/value)
* title
* description
* transient
* hidden
* disallow
* extends
* identity

h2. A non-normative tutorial

A collection of Non-normative examples of Orderly:

h3. comments and whitespace

Orderly supports comments, both '#' and '//'.

Orderly doesn't rely overlymuch on whitespace, leaving the decision of how to format your schema up to you.   

h3. type names

Type names may be anything that is allowed inside "JSON strings":http://json.org/.  Unlike JSON itself, however, orderly provides a shorthand where a subset of strings may be represented without quotes.  For instance these are all valid orderly:

bc.     string foo;
    string "foo";
    string "this is a property name with spaces"; 

h3. common properties

From the JSONSchema specification, the following four options exist which apply to all data types:

The @optional@ property indicates a value which is not required in a conformant JSON instance.  Optional values are represented in orderly with a trailing question mark:

bc.     string name?;
    string "name"?;




The @requires@ property indicates a that if a value is present in the instance JSON, another named value must also be present. 

bc.     string town <state>;
 
The @enum@ propery specifies a set of allowable values for a key in the json document.

bc.     string { "happy", "sad", "meh" } mood;
    integer { 7, 42 } secretOfLife;

In a JSONSchema document the @default@ property specifies a default value for a property.  One could imagine that as an input object passes validation it will be automatically augmented with default values for required properties missing in the instance object.

bc.     string mood [ "happy", "sad", "meh" ] = "happy"; # optimistically default to "happy"

h3. string types

Strings are specified in orderly using the @string@ type specifier.  Strings in JSONSchema support "minLength" and "maxLength" properties, this are represented using curly braces immediately after the type:  

bc.     string{4,12} login;

Omission of a specification of either minimum or maximum is allowed:

bc.     string{4,} login; # login requires at least 4 chars
    string{,32} name; # name may not be longer than 32 chars

h3. number types

h3. integer types

h3. boolean types

h3. object types

h3. array types

h3. null types

h3. any types

h3. references

h3. more complex examples

A number with a range, and enumerated possible values, and a default:

bc. integer powerOfTwo{0,256} [1,2,4,8,16,32,64,128,256] = 1;

An object with enumerated possible values and a default.

bc.     object {
      string beast;
      number normalTemperature;
    } [ { "animal": "canine", "normalTemperature": 101.2 },
        { "animal": "human", "normalTemperature": 98.6 } ]
    temps = { "animal": "human", "normalTemperature": 101.2 };


h2. The normative grammar

In JSONSchema strings  

h2. License

All the cruft you find here is covered under a BSD style license, even if it's not approprately marked.  The act of forking this project on github is implicit permission to pull back your contributions and redistribute them under this same license.

<pre>
 Copyright 2009, Lloyd Hilaiel.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are
 met:
 
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
 
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.
 
  3. Neither the name of Lloyd Hilaiel nor the names of its
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
</pre>
